// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.1
// source: kafkapacket.proto

package kafka

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KafkaPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Properties
	ContentType     string                `protobuf:"bytes,1,opt,name=contentType,proto3" json:"contentType,omitempty"`         // MIME content type
	ContentEncoding string                `protobuf:"bytes,2,opt,name=contentEncoding,proto3" json:"contentEncoding,omitempty"` // MIME content encoding
	SendTo          string                `protobuf:"bytes,3,opt,name=sendTo,proto3" json:"sendTo,omitempty"`                   // application use - address to send to (ex: RPC)
	GroupId         string                `protobuf:"bytes,4,opt,name=groupId,proto3" json:"groupId,omitempty"`                 // application use - kafka group id
	CorrelationId   string                `protobuf:"bytes,5,opt,name=correlationId,proto3" json:"correlationId,omitempty"`     // application use - correlation identifier
	ReplyTo         string                `protobuf:"bytes,6,opt,name=replyTo,proto3" json:"replyTo,omitempty"`                 // application use - address to reply to (ex: RPC)
	MessageId       string                `protobuf:"bytes,7,opt,name=messageId,proto3" json:"messageId,omitempty"`             // application use - message identifier
	Timestamp       uint64                `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`            // application use - message timestamp
	Type            string                `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`                       // application use - message type name
	UserId          string                `protobuf:"bytes,10,opt,name=userId,proto3" json:"userId,omitempty"`                  // application use - creating user - should be authenticated user
	AppId           string                `protobuf:"bytes,11,opt,name=appId,proto3" json:"appId,omitempty"`                    // application use - creating application id
	StatusCode      uint32                `protobuf:"varint,12,opt,name=statusCode,proto3" json:"statusCode,omitempty"`         // application response use - message response status
	ErrorMessage    string                `protobuf:"bytes,13,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`      // application response use - error message
	Headers         []*KafkaPacket_Header `protobuf:"bytes,14,rep,name=headers,proto3" json:"headers,omitempty"`                // Application or header exchange table
	Body            []byte                `protobuf:"bytes,15,opt,name=body,proto3" json:"body,omitempty"`
	RoutingKey      string                `protobuf:"bytes,16,opt,name=routingKey,proto3" json:"routingKey,omitempty"` // application use - delivery request
	ConsumerTag     string                `protobuf:"bytes,17,opt,name=consumerTag,proto3" json:"consumerTag,omitempty"`
	Exchange        string                `protobuf:"bytes,18,opt,name=exchange,proto3" json:"exchange,omitempty"`
}

func (x *KafkaPacket) Reset() {
	*x = KafkaPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapacket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaPacket) ProtoMessage() {}

func (x *KafkaPacket) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapacket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaPacket.ProtoReflect.Descriptor instead.
func (*KafkaPacket) Descriptor() ([]byte, []int) {
	return file_kafkapacket_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaPacket) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *KafkaPacket) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *KafkaPacket) GetSendTo() string {
	if x != nil {
		return x.SendTo
	}
	return ""
}

func (x *KafkaPacket) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *KafkaPacket) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *KafkaPacket) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *KafkaPacket) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *KafkaPacket) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *KafkaPacket) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KafkaPacket) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *KafkaPacket) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *KafkaPacket) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *KafkaPacket) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *KafkaPacket) GetHeaders() []*KafkaPacket_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *KafkaPacket) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *KafkaPacket) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *KafkaPacket) GetConsumerTag() string {
	if x != nil {
		return x.ConsumerTag
	}
	return ""
}

func (x *KafkaPacket) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

type KafkaPacket_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KafkaPacket_Header) Reset() {
	*x = KafkaPacket_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kafkapacket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaPacket_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaPacket_Header) ProtoMessage() {}

func (x *KafkaPacket_Header) ProtoReflect() protoreflect.Message {
	mi := &file_kafkapacket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaPacket_Header.ProtoReflect.Descriptor instead.
func (*KafkaPacket_Header) Descriptor() ([]byte, []int) {
	return file_kafkapacket_proto_rawDescGZIP(), []int{0, 0}
}

func (x *KafkaPacket_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaPacket_Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_kafkapacket_proto protoreflect.FileDescriptor

var file_kafkapacket_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x78, 0x68, 0x68, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xfc,
	0x04, 0x0a, 0x0b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x78, 0x68, 0x68, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x32, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x3b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kafkapacket_proto_rawDescOnce sync.Once
	file_kafkapacket_proto_rawDescData = file_kafkapacket_proto_rawDesc
)

func file_kafkapacket_proto_rawDescGZIP() []byte {
	file_kafkapacket_proto_rawDescOnce.Do(func() {
		file_kafkapacket_proto_rawDescData = protoimpl.X.CompressGZIP(file_kafkapacket_proto_rawDescData)
	})
	return file_kafkapacket_proto_rawDescData
}

var file_kafkapacket_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_kafkapacket_proto_goTypes = []interface{}{
	(*KafkaPacket)(nil),        // 0: xhhk.protocol.kafkapacket.KafkaPacket
	(*KafkaPacket_Header)(nil), // 1: xhhk.protocol.kafkapacket.KafkaPacket.Header
}
var file_kafkapacket_proto_depIdxs = []int32{
	1, // 0: xhhk.protocol.kafkapacket.KafkaPacket.headers:type_name -> xhhk.protocol.kafkapacket.KafkaPacket.Header
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kafkapacket_proto_init() }
func file_kafkapacket_proto_init() {
	if File_kafkapacket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kafkapacket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kafkapacket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaPacket_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kafkapacket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kafkapacket_proto_goTypes,
		DependencyIndexes: file_kafkapacket_proto_depIdxs,
		MessageInfos:      file_kafkapacket_proto_msgTypes,
	}.Build()
	File_kafkapacket_proto = out.File
	file_kafkapacket_proto_rawDesc = nil
	file_kafkapacket_proto_goTypes = nil
	file_kafkapacket_proto_depIdxs = nil
}
